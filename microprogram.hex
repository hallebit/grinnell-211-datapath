v2.0 raw
# This file holds the microprogram data that loads into the datapath's
# Microprogram ROM. Each row holds a 16-bit value that is broken into
# control signals to execute an instruction with a given opcode.

# Control bits:
# 0: Write enable in register file
# 1: Ainv
# 2: Binv
# 3: Cin
# 4, 5, 6: ALU Op
# 7: jump instruction
# 8: branch instruction
# 9: Use r0 as second register input
# 10: invert branch sense (branch when ALU result is not zero)


# Opcode 0: add
# Write enable = 1. ALU op = 0
0001

# Opcode 1: sub
# Write enable = 1. Binv = 1. Cin = 1. ALU op = 0
000d

# Opcode 2: and
# Write enable = 1. ALU op = 1
0011

# Opcode 3: or
# Write enable = 1. ALU op = 2
0021

# Opcode 4: nand
# Write enable = 1. Ainv = 1. Binv = 1. ALU op = 2
0017

# Opcode 5: nor
# Write enable = 1. Ainv = 1. Binv = 1. ALU op = 1
0027

# Opcode 6: xor
# Write enable = 1. ALU op = 3
0031

# Opcode 7: slt
# Write enable = 1. ALU op = 4
0041

# Opcode 8: sltu
# Write enable = 1. ALU op = 5
0051

# Opcode 9: lb
# Write enable = 1. ALU op = 3. Use r_0 = 1. Write data from R_d = 1.
#0010 0010 0011 0001
2031

# Opcode 10: lw
# Write enable = 1. ALU op = 3. Use r_0 = 1. Handle Word = 1. Write data from R_d = 1.
#0011 0010 0011 0001
3031

# Opcode 11: sb
# ALU op = 3. Use r_0 = 1. Mem Enable Writes = 1.
#0000 1010 0011 0000
0a30

# Opcode 12: sw
# ALU op = 3. Use r_0 = 1. Mem Enable Writes = 1. Handle Word = 1. 
#0001 1010 0011 0000
1a30

# Opcode 13: beq
# ALU op = 3. Conditional Branch = 1. 
# 001 0011 0000
0130

# Opcode 14: bne
# ALU op = 3. Conditional Branch = 1. Branch Invert = 1.
# 101 0011 0000 
0530

# Opcode 15: j
# Write enable = 1. Jump bit = 1. 
# 1000 0001
0081
